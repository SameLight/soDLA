[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\shift.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_spt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\HLS_cdp_ocvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_XXIF_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_arb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\HLS_cdp_icvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_csb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_cq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_write.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_XXIF_libs.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_IG_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_IG_bpt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_cvtin.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_cvtout.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_bpt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_read.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_IG_arb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\int_sum_block.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\spec\configurations.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CACC_delivery_buffer$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_dlDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_sgDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csc_wl_dec_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_shared_buffer$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dc.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_sgDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_WL_decDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_statusDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_in$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_packDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_in$rt_inImpl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dma_muxDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_wtIO.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CACC_assembly_ctrl$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_active.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_reg$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cdmaDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_packDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_reg.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\updt_entries_slices_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_activeDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_DMAIF_wr$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_sg.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_glb.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_macDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_dlDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_caccDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_sg.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_out$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cmacDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbuf$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cscDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_CVT_cell$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cdmaDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_dl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_glbDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_macDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_wlDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_inDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dcIO.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dma_mux.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_out$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_regfileDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_dlDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cscDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_regfile$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_cvtDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_regfile.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_DMAIF_rdreq$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_ctrlDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_imgDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_mac$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_pack$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dcDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift2$$anon$2.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_reg$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\sdp2pdp_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_sgDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_sg$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cmac_reg_dual_flop_outputs.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shiftDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_in.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_mac$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_imgDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_wl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_GLB_fc.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_wt.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_statusDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csb2dp_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csc2cmac_wt_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_status.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_img$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_imgDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_WL_dec.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_dma_wr_rsp_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cacc2sdp_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_clock_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_WL_decDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbufDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_status$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shiftDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_CVT_cellDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_dma_rd_req_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\reg_control_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_out$rt_outImpl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift2.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_sgDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_ctrl$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_glb$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_mac.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift2Driver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_statusDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_csc$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CACC_assembly_ctrl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_out.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\updt_entries_kernels_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_ctrlDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\sc2buf_data_rd_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_cvtDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_cvt$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_wtDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csc_sg2wl_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csc_dual_reg_flop_outputs.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_pack.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_WL_dec$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_ctrl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cdmaIO.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CACC_delivery_buffer.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_active$activeImpl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_sg$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_inDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dcDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_regfileDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_packDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_shared_bufferDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CACC_assembly_buffer.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_DMAIF_rdrsp.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbuf$cbufImpl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cacc$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cscConfiguration.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_CVT_cellDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_cvtDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_CVT_cell.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_core.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_shared_bufferDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cmac2cacc_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_dma_rd_rsp_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cmacDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_activeDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbuf$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_wlIO.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cmac$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_dlIO.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_active$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CACC_assembly_buffer$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_glbDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_DMAIF_rdreq.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shiftDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_core$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_coreDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbufDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_in$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cdma2sc_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_coreDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbufDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dma_muxDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift2Driver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cdmaDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cbuf.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_mac$macImpl.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_outDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_ctrlDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csc2cmac_data_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_wlDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_glbDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dma_muxDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cacc.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cmacConfiguration.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_wtDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_DMAIF_rdrsp$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_wr_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_cvt.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cdma2buf_wr_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_inDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_csc.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_rd_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_img.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_outDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdla_dma_wr_req_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_macDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_regfileDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_DMAIF_wr.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_IMG_sgDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\test_shift2Driver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_outDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cmacDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cscDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_WL_decDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_caccDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_wlDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_activeDriver$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_active$.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_shared_buffer.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_wtDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_caccDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dma_mux$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_dcDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_CVT_cellDriver$delayedInit$body.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\sc2buf_wt_rd_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cmac.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CDMA_shared_bufferDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csc_sg2dl_if.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_GLB_fc$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_coreDriver.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cmac_core_actv.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\nvdlaConfig.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_cdma.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CSC_sgDriver$delayedInit$body.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(nvdla.test_shift, nvdla.nvdlaConfig, nvdla.test_shiftDriver, nvdla.test_shift2Driver, nvdla.test_shift2)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdrsp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_wr.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_mac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_sg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dma_mux.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_dl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\spec\odif.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_wt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cbuf\NV_NVDLA_cbuf.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_WL_dec.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_active.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_cmac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_wl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_CVT_cell.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\shift.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdreq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_fc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_cdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_status.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_shared_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_delivery_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_cacc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\spec\configurations.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_glb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_img.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_csc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_sg.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(nvdla.test_shift, nvdla.nvdlaConfig, nvdla.test_shiftDriver, nvdla.test_shift2Driver, nvdla.test_shift2)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdrsp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_spt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_wr.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_mac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_sg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dma_mux.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_dl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\spec\odif.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\HLS_cdp_ocvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_wt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_XXIF_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cbuf\NV_NVDLA_cbuf.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_IG_arb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_WL_dec.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_arb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_active.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\HLS_cdp_icvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_cmac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_wl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_CVT_cell.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_csb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\shift.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_cq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_write.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_XXIF_libs.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdreq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_IG_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_fc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\int_sum_block.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_IG_bpt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_cdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_status.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_shared_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_delivery_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_cacc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\spec\configurations.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_glb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_img.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_cvtin.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_cvtout.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_bpt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_WRITE_IG_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_READ_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_csc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_read.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_sg.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 61 Scala sources to C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.4:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.4:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 13b07eb3 for Scala compiler version 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-deprecation[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-unchecked[0m
[0m[[0m[0mdebug[0m] [0m[0m	-language:reflectiveCalls[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xsource:2.11[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xplugin:C:\Users\yuda\.ivy2\cache\org.scalamacros\paradise_2.12.4\jars\paradise_2.12.4-2.1.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\Java\jre1.8.0_221\lib\resources.jar;C:\Program Files\Java\jre1.8.0_221\lib\rt.jar;C:\Program Files\Java\jre1.8.0_221\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_221\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_221\lib\jce.jar;C:\Program Files\Java\jre1.8.0_221\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_221\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_221\classes;C:\Users\yuda\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.12.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\chisel3_2.12\jars\chisel3_2.12-3.1.8.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang\scala-reflect\jars\scala-reflect-2.12.4.jar;C:\Users\yuda\.ivy2\cache\com.github.scopt\scopt_2.12\jars\scopt_2.12-3.7.0.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\firrtl_2.12\jars\firrtl_2.12-1.1.7.jar;C:\Users\yuda\.ivy2\cache\org.antlr\antlr4\jars\antlr4-4.7.1.jar;C:\Users\yuda\.ivy2\cache\org.antlr\antlr4-runtime\jars\antlr4-runtime-4.7.1.jar;C:\Users\yuda\.ivy2\cache\org.antlr\antlr-runtime\jars\antlr-runtime-3.5.2.jar;C:\Users\yuda\.ivy2\cache\org.antlr\ST4\jars\ST4-4.0.8.jar;C:\Users\yuda\.ivy2\cache\org.abego.treelayout\org.abego.treelayout.core\bundles\org.abego.treelayout.core-1.0.3.jar;C:\Users\yuda\.ivy2\cache\org.glassfish\javax.json\bundles\javax.json-1.0.4.jar;C:\Users\yuda\.ivy2\cache\com.ibm.icu\icu4j\jars\icu4j-58.2.jar;C:\Users\yuda\.ivy2\cache\com.typesafe.scala-logging\scala-logging_2.12\bundles\scala-logging_2.12-3.7.2.jar;C:\Users\yuda\.ivy2\cache\org.slf4j\slf4j-api\jars\slf4j-api-1.7.25.jar;C:\Users\yuda\.ivy2\cache\ch.qos.logback\logback-classic\jars\logback-classic-1.2.3.jar;C:\Users\yuda\.ivy2\cache\ch.qos.logback\logback-core\jars\logback-core-1.2.3.jar;C:\Users\yuda\.ivy2\cache\net.jcazevedo\moultingyaml_2.12\jars\moultingyaml_2.12-0.4.0.jar;C:\Users\yuda\.ivy2\cache\com.github.nscala-time\nscala-time_2.12\jars\nscala-time_2.12-2.14.0.jar;C:\Users\yuda\.ivy2\cache\joda-time\joda-time\jars\joda-time-2.9.4.jar;C:\Users\yuda\.ivy2\cache\org.joda\joda-convert\jars\joda-convert-1.2.jar;C:\Users\yuda\.ivy2\cache\org.yaml\snakeyaml\bundles\snakeyaml-1.17.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-native_2.12\jars\json4s-native_2.12-3.5.3.jar;C:\Users\yuda\.ivy2\cache\com.thoughtworks.paranamer\paranamer\bundles\paranamer-2.8.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang.modules\scala-xml_2.12\bundles\scala-xml_2.12-1.0.6.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\chisel-iotesters_2.12\jars\chisel-iotesters_2.12-1.2.10.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\firrtl-interpreter_2.12\jars\firrtl-interpreter_2.12-1.1.7.jar;C:\Users\yuda\.ivy2\cache\org.scalatest\scalatest_2.12\bundles\scalatest_2.12-3.0.1.jar;C:\Users\yuda\.ivy2\cache\org.scalactic\scalactic_2.12\bundles\scalactic_2.12-3.0.1.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang.modules\scala-parser-combinators_2.12\bundles\scala-parser-combinators_2.12-1.0.4.jar;C:\Users\yuda\.ivy2\cache\org.scalacheck\scalacheck_2.12\jars\scalacheck_2.12-1.13.4.jar;C:\Users\yuda\.ivy2\cache\org.scala-sbt\test-interface\jars\test-interface-1.0.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang.modules\scala-jline\bundles\scala-jline-2.12.1.jar;C:\Users\yuda\.ivy2\cache\org.fusesource.jansi\jansi\jars\jansi-1.11.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\treadle_2.12\jars\treadle_2.12-1.0.5.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-jackson_2.12\jars\json4s-jackson_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-core_2.12\jars\json4s-core_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-ast_2.12\jars\json4s-ast_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-scalap_2.12\jars\json4s-scalap_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\com.fasterxml.jackson.core\jackson-databind\bundles\jackson-databind-2.9.6.jar;C:\Users\yuda\.ivy2\cache\com.fasterxml.jackson.core\jackson-annotations\bundles\jackson-annotations-2.9.0.jar;C:\Users\yuda\.ivy2\cache\com.fasterxml.jackson.core\jackson-core\bundles\jackson-core-2.9.6.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\dsptools_2.12\jars\dsptools_2.12-1.1.6.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\spire_2.12\jars\spire_2.12-0.14.1.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\spire-macros_2.12\jars\spire-macros_2.12-0.14.1.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\machinist_2.12\jars\machinist_2.12-0.6.1.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\algebra_2.12\jars\algebra_2.12-0.7.0.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\cats-kernel_2.12\jars\cats-kernel_2.12-0.9.0.jar;C:\Users\yuda\.ivy2\cache\org.scalanlp\breeze_2.12\jars\breeze_2.12-0.13.2.jar;C:\Users\yuda\.ivy2\cache\org.scalanlp\breeze-macros_2.12\jars\breeze-macros_2.12-0.13.2.jar;C:\Users\yuda\.ivy2\cache\com.github.fommil.netlib\core\jars\core-1.1.2.jar;C:\Users\yuda\.ivy2\cache\net.sourceforge.f2j\arpack_combined_all\jars\arpack_combined_all-0.1.jar;C:\Users\yuda\.ivy2\cache\net.sf.opencsv\opencsv\jars\opencsv-2.3.jar;C:\Users\yuda\.ivy2\cache\com.github.rwl\jtransforms\jars\jtransforms-2.4.0.jar;C:\Users\yuda\.ivy2\cache\junit\junit\jars\junit-4.8.2.jar;C:\Users\yuda\.ivy2\cache\org.apache.commons\commons-math3\jars\commons-math3-3.2.jar;C:\Users\yuda\.ivy2\cache\org.spire-math\spire_2.12\jars\spire_2.12-0.13.0.jar;C:\Users\yuda\.ivy2\cache\org.spire-math\spire-macros_2.12\jars\spire-macros_2.12-0.13.0.jar;C:\Users\yuda\.ivy2\cache\com.chuusai\shapeless_2.12\bundles\shapeless_2.12-2.3.2.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\macro-compat_2.12\jars\macro-compat_2.12-1.1.1.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 37.2116103 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_cq...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_cq)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_cq)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_cq,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(cq_wr_pause,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(cq_rd1_pvld,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(cq_rd3_pvld,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(cq_rd3_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(cq_rd2_pvld,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(cq_rd2_pd,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(cq_rd1_prdy,[Default]), UsedName(wait,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_cq;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(cq_rd1_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cq_rd0_pvld,[Default]), UsedName(cq_rd0_pd,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_rd2_prdy,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(cq_rd4_pvld,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(cq_rd4_prdy,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(cq_rd0_prdy,[Default]), UsedName(cq_rd4_pd,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(cq_rd3_prdy,[Default]), UsedName(portsSize,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_cq,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_cq has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(cq_wr_pause,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(cq_rd1_pvld,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(cq_rd3_pvld,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(cq_rd3_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(cq_rd2_pvld,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(cq_rd2_pd,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(cq_rd1_prdy,[Default]), UsedName(wait,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_cq;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(cq_rd1_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cq_rd0_pvld,[Default]), UsedName(cq_rd0_pd,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_rd2_prdy,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(cq_rd4_pvld,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(cq_rd4_prdy,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(cq_rd0_prdy,[Default]), UsedName(cq_rd4_pd,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(cq_rd3_prdy,[Default]), UsedName(portsSize,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_cq,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_cq)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.read_eg_arb_Driver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.read_eg_arb_Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.read_eg_arb_Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.read_eg_arb_Driver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(read_eg_arb_Driver,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.read_eg_arb_Driver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(read_eg_arb_Driver,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.read_eg_arb_Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.test_shift2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.test_shift2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.test_shift2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.test_shift2,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(nvdla;test_shift2;init;,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(initializeInParent,[Default]), UsedName(c,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(test_shift2,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(a,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.test_shift2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(nvdla;test_shift2;init;,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(initializeInParent,[Default]), UsedName(c,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(test_shift2,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(a,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.test_shift2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_IG_bpt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_IG_bpt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_IG_bpt)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_ig: Set(UsedName(NV_NVDLA_MCIF_READ_IG_bpt,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(dma2bpt_req_ready,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(tieoff_axid,[Default]), UsedName(dma2bpt_req_valid,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(dma2bpt_req_pd,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_bpt;init;,[Default]), UsedName(tieoff_lat_fifo_depth,[Default]), UsedName(dma2bpt_cdt_lat_fifo_pop,[Default]), UsedName(io,[Default]), UsedName(bpt2arb_req_valid,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_IG_bpt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_bpt,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(dma2bpt_req_ready,[Default]), UsedName(pipe_p1,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(tieoff_axid,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(dma2bpt_req_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(in_rdy_p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(dma2bpt_req_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(in_vld_p,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_bpt;init;,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(tieoff_lat_fifo_depth,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(in_rdy,[Default]), UsedName(##,[Default]), UsedName(dma2bpt_cdt_lat_fifo_pop,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(in_vld,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(in_pd_p,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(pipe_p2,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(in_pd,[Default]), UsedName(portsSize,[Default]), UsedName(bpt2arb_req_valid,[Default]), UsedName(clock,[Default]))) invalidates 2 classes due to The nvdla.NV_NVDLA_MCIF_READ_IG_bpt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_bpt,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(dma2bpt_req_ready,[Default]), UsedName(pipe_p1,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(tieoff_axid,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(dma2bpt_req_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(in_rdy_p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(dma2bpt_req_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(in_vld_p,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_bpt;init;,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(tieoff_lat_fifo_depth,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(in_rdy,[Default]), UsedName(##,[Default]), UsedName(dma2bpt_cdt_lat_fifo_pop,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(in_vld,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(in_pd_p,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(pipe_p2,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(in_pd,[Default]), UsedName(portsSize,[Default]), UsedName(bpt2arb_req_valid,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_IG_bpt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_MCIF_READ_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.test_shiftDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.test_shiftDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.test_shiftDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.test_shiftDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(test_shiftDriver,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.test_shiftDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(test_shiftDriver,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.test_shiftDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_iq...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_iq)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_iq)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_iq,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_wr_weight_bdma,[Default]), UsedName(csb2mcif_req_pvld,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(dp2reg_idle,[Default]), UsedName(reg2dp_wr_os_cnt,[Default]), UsedName(!=,[Default]), UsedName(reg2dp_rd_weight_cdma_wt,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_wr_weight_rsv_0,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_wr_weight_cdp,[Default]), UsedName(eq,[Default]), UsedName(reg2dp_rd_weight_sdp_n,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_iq;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(forceName,[Default]), UsedName(csb2mcif_req_prdy,[Default]), UsedName(reg2dp_rd_weight_sdp_b,[Default]), UsedName(reg2dp_rd_weight_cdma_dat,[Default]), UsedName(reg2dp_wr_weight_pdp,[Default]), UsedName(name,[Default]), UsedName(mcif2csb_resp_valid,[Default]), UsedName(reg2dp_rd_weight_sdp,[Default]), UsedName(wait,[Default]), UsedName(reg2dp_rd_weight_bdma,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_iq,[Default]), UsedName(reg2dp_rd_weight_sdp_e,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_wr_weight_rsv_1,[Default]), UsedName(reg2dp_wr_weight_sdp,[Default]), UsedName(addId,[Default]), UsedName(reg2dp_rd_weight_rbk,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(csb2mcif_req_pd,[Default]), UsedName(reg2dp_rd_weight_cdp,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(reg2dp_rd_weight_pdp,[Default]), UsedName(reg2dp_wr_weight_rbk,[Default]), UsedName(reg2dp_rd_weight_rsv_0,[Default]), UsedName(reg2dp_wr_weight_rsv_2,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(reg2dp_rd_weight_rsv_1,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2csb_resp_pd,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_iq has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_wr_weight_bdma,[Default]), UsedName(csb2mcif_req_pvld,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(dp2reg_idle,[Default]), UsedName(reg2dp_wr_os_cnt,[Default]), UsedName(!=,[Default]), UsedName(reg2dp_rd_weight_cdma_wt,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_wr_weight_rsv_0,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_wr_weight_cdp,[Default]), UsedName(eq,[Default]), UsedName(reg2dp_rd_weight_sdp_n,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_iq;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(forceName,[Default]), UsedName(csb2mcif_req_prdy,[Default]), UsedName(reg2dp_rd_weight_sdp_b,[Default]), UsedName(reg2dp_rd_weight_cdma_dat,[Default]), UsedName(reg2dp_wr_weight_pdp,[Default]), UsedName(name,[Default]), UsedName(mcif2csb_resp_valid,[Default]), UsedName(reg2dp_rd_weight_sdp,[Default]), UsedName(wait,[Default]), UsedName(reg2dp_rd_weight_bdma,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_iq,[Default]), UsedName(reg2dp_rd_weight_sdp_e,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_wr_weight_rsv_1,[Default]), UsedName(reg2dp_wr_weight_sdp,[Default]), UsedName(addId,[Default]), UsedName(reg2dp_rd_weight_rbk,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(csb2mcif_req_pd,[Default]), UsedName(reg2dp_rd_weight_cdp,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(reg2dp_rd_weight_pdp,[Default]), UsedName(reg2dp_wr_weight_rbk,[Default]), UsedName(reg2dp_rd_weight_rsv_0,[Default]), UsedName(reg2dp_wr_weight_rsv_2,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(reg2dp_rd_weight_rsv_1,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2csb_resp_pd,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_iq)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_igDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_igDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(NV_NVDLA_MCIF_READ_igDriver,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_READ_igDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.nvdlaConfig...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.nvdlaConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.nvdlaConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CACC_delivery_buffer: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_activeDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_arb: Set(UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cmac2cacc_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_sg: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_wlIO: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_imgDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_CVT_cellDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_DMAIF_wr: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dma_muxDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.csc_wl_dec_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_sgDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_wl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.sc2buf_data_rd_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cbufDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_dlDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_csc: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dma_mux: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cbuf.cbufImpl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_DMAIF_rdrsp: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_ig: Set(UsedName(RDMA_NUM,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_sgDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_macDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cacc: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dc: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_GLB_fc: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_rd_rsp_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_cvt: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cbuf: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_glbDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cdma2sc_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.updt_entries_kernels_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_pack: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_CVT_cell: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cdmaIO: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_igDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_WL_decDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cacc2sdp_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_core: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_reg: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_mac: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_status: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_active: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_DMAIF_rdreq: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CACC_assembly_ctrl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_sg: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cdma2buf_wr_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.csc2cmac_wt_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CACC_assembly_buffer: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_in: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_wr_rsp_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cdma: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.sc2buf_wt_rd_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cmacDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_IG_arb: Set(UsedName(WDMA_NUM,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cmac: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_write: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_shared_bufferDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_img: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_glb: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_out: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_statusDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_WL_dec: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_caccDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dcDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_eg: Set(UsedName(WDMA_NUM,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_ig: Set(UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_shared_buffer: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_cvtDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_coreDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_bpt: Set(UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_wtIO: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_rd_req_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_wlDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_wtDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_packDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_cq: Set(UsedName(FV_RAND_WR_PAUSE,[Default]), UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_cvt: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_ctrl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dcIO: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cmac_core_actv: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_regfile: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.csc2cmac_data_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_wt: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_dlIO: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.sdp2pdp_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cscDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_dl: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cdmaDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_regfileDriver: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_wr_req_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_IG_spt: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.updt_entries_slices_if: Set(UsedName(nvdlaConfig,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.nvdlaConfig,ModifiedNames(changes = UsedName(tieoff_axid_rbk,[Default]), UsedName(tieoff_axid_cdma_dat,[Default]), UsedName(WDMA_MAX_NUM,[Default]), UsedName(WDMA_NUM,[Default]), UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(tieoff_axid_cdp,[Default]), UsedName(RDMA_MAX_NUM,[Default]), UsedName(tieoff_axid_pdp,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(tieoff_axid_bdma,[Default]), UsedName(NVDLA_DMA_WR_IG_PW,[Default]), UsedName(tieoff_axid_sdp_b,[Default]), UsedName(tieoff_axid_sdp_n,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(tieoff_axid_sdp,[Default]), UsedName(FV_RAND_WR_PAUSE,[Default]), UsedName(nvdlaConfig,[Default]), UsedName(tieoff_axid_cdma_wt,[Default]), UsedName(tieoff_axid_sdp_e,[Default]), UsedName(tieoff_axid_read,[Default]))) invalidates 106 classes due to The nvdla.nvdlaConfig has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(tieoff_axid_rbk,[Default]), UsedName(tieoff_axid_cdma_dat,[Default]), UsedName(WDMA_MAX_NUM,[Default]), UsedName(WDMA_NUM,[Default]), UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(tieoff_axid_cdp,[Default]), UsedName(RDMA_MAX_NUM,[Default]), UsedName(tieoff_axid_pdp,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(tieoff_axid_bdma,[Default]), UsedName(NVDLA_DMA_WR_IG_PW,[Default]), UsedName(tieoff_axid_sdp_b,[Default]), UsedName(tieoff_axid_sdp_n,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(tieoff_axid_sdp,[Default]), UsedName(FV_RAND_WR_PAUSE,[Default]), UsedName(nvdlaConfig,[Default]), UsedName(tieoff_axid_cdma_wt,[Default]), UsedName(tieoff_axid_sdp_e,[Default]), UsedName(tieoff_axid_read,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.nvdlaConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_CACC_delivery_buffer, nvdla.NV_NVDLA_CMAC_CORE_activeDriver, nvdla.NV_NVDLA_MCIF_READ_IG_arb, nvdla.cmac2cacc_if, nvdla.NV_NVDLA_CSC_sg, nvdla.NV_NVDLA_CSC_wlIO, nvdla.NV_NVDLA_CDMA_imgDriver, nvdla.NV_NVDLA_CDMA_CVT_cellDriver, nvdla.NV_NVDLA_DMAIF_wr, nvdla.NV_NVDLA_CDMA_dma_muxDriver, nvdla.csc_wl_dec_if, nvdla.NV_NVDLA_CSC_sgDriver, nvdla.NV_NVDLA_CSC_wl, nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl, nvdla.sc2buf_data_rd_if, nvdla.NV_NVDLA_cbufDriver, nvdla.NV_NVDLA_CSC_dlDriver, nvdla.NV_NVDLA_csc, nvdla.NV_NVDLA_CDMA_dma_mux, nvdla.NV_NVDLA_cbuf.cbufImpl, nvdla.NV_NVDLA_DMAIF_rdrsp, nvdla.NV_NVDLA_MCIF_READ_ig, nvdla.NV_NVDLA_CDMA_IMG_sgDriver, nvdla.NV_NVDLA_CMAC_CORE_macDriver, nvdla.NV_NVDLA_cacc, nvdla.NV_NVDLA_CDMA_dc, nvdla.NV_NVDLA_GLB_fc, nvdla.nvdla_dma_rd_rsp_if, nvdla.NV_NVDLA_CDMA_cvt, nvdla.NV_NVDLA_cbuf, nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver, nvdla.NV_NVDLA_glbDriver, nvdla.cdma2sc_if, nvdla.updt_entries_kernels_if, nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver, nvdla.NV_NVDLA_CDMA_IMG_pack, nvdla.NV_NVDLA_CDMA_CVT_cell, nvdla.NV_NVDLA_cdmaIO, nvdla.NV_NVDLA_MCIF_READ_igDriver, nvdla.NV_NVDLA_CSC_WL_decDriver, nvdla.cacc2sdp_if, nvdla.NV_NVDLA_CMAC_core, nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver, nvdla.NV_NVDLA_CMAC_reg, nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl, nvdla.NV_NVDLA_CMAC_CORE_mac, nvdla.NV_NVDLA_CDMA_status, nvdla.NV_NVDLA_CMAC_CORE_active, nvdla.NV_NVDLA_DMAIF_rdreq, nvdla.NV_NVDLA_CACC_assembly_ctrl, nvdla.NV_NVDLA_CDMA_IMG_sg, nvdla.cdma2buf_wr_if, nvdla.csc2cmac_wt_if, nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl, nvdla.NV_NVDLA_CACC_assembly_buffer, nvdla.NV_NVDLA_CMAC_CORE_rt_in, nvdla.nvdla_dma_wr_rsp_if, nvdla.NV_NVDLA_cdma, nvdla.sc2buf_wt_rd_if, nvdla.NV_NVDLA_cmacDriver, nvdla.NV_NVDLA_MCIF_WRITE_IG_arb, nvdla.NV_NVDLA_cmac, nvdla.NV_NVDLA_MCIF_write, nvdla.NV_NVDLA_CDMA_shared_bufferDriver, nvdla.NV_NVDLA_CDMA_img, nvdla.NV_NVDLA_glb, nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_out, nvdla.NV_NVDLA_CDMA_statusDriver, nvdla.NV_NVDLA_CSC_WL_dec, nvdla.NV_NVDLA_caccDriver, nvdla.NV_NVDLA_CDMA_dcDriver, nvdla.NV_NVDLA_MCIF_WRITE_eg, nvdla.NV_NVDLA_MCIF_WRITE_ig, nvdla.NV_NVDLA_CDMA_shared_buffer, nvdla.NV_NVDLA_CDMA_cvtDriver, nvdla.NV_NVDLA_CMAC_coreDriver, nvdla.NV_NVDLA_MCIF_READ_IG_bpt, nvdla.NV_NVDLA_CDMA_wtIO, nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver, nvdla.nvdla_dma_rd_req_if, nvdla.NV_NVDLA_CSC_wlDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl, nvdla.NV_NVDLA_CDMA_wtDriver, nvdla.NV_NVDLA_CDMA_IMG_packDriver, nvdla.NV_NVDLA_MCIF_WRITE_cq, nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt, nvdla.NV_NVDLA_MCIF_READ_IG_cvt, nvdla.NV_NVDLA_CDMA_IMG_ctrl, nvdla.NV_NVDLA_CDMA_dcIO, nvdla.cmac_core_actv, nvdla.NV_NVDLA_CSC_regfile, nvdla.csc2cmac_data_if, nvdla.NV_NVDLA_CDMA_wt, nvdla.NV_NVDLA_CSC_dlIO, nvdla.sdp2pdp_if, nvdla.NV_NVDLA_cscDriver, nvdla.NV_NVDLA_CSC_dl, nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt, nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver, nvdla.NV_NVDLA_cdmaDriver, nvdla.NV_NVDLA_CSC_regfileDriver, nvdla.nvdla_dma_wr_req_if, nvdla.NV_NVDLA_MCIF_WRITE_IG_spt, nvdla.updt_entries_slices_if)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.read_eg_arb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.read_eg_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.read_eg_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.read_eg_arb,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(wt,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(read_eg_arb,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(gnt,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(req,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(clk,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(new_wt_left,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(nvdla;read_eg_arb;init;,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.read_eg_arb has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(wt,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(read_eg_arb,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(gnt,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(req,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(clk,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(new_wt_left,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(nvdla;read_eg_arb;init;,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.read_eg_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.read_ig_arb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.read_ig_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.read_ig_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_arb: Set(UsedName(wt,[Default]), UsedName(gnt,[Default]), UsedName(read_ig_arb,[Default]), UsedName(req,[Default]), UsedName(IO,[Default]), UsedName(nvdla;read_ig_arb;init;,[Default]), UsedName(clk,[Default]), UsedName(io,[Default]), UsedName(gnt_busy,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.read_ig_arb,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(wt,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(gnt,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(wrr_gnt_arr,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(read_ig_arb,[Default]), UsedName(req,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(nvdla;read_ig_arb;init;,[Default]), UsedName(##,[Default]), UsedName(clk,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(gnt_busy,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 2 classes due to The nvdla.read_ig_arb has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(wt,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(gnt,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(wrr_gnt_arr,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(read_ig_arb,[Default]), UsedName(req,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(nvdla;read_ig_arb;init;,[Default]), UsedName(##,[Default]), UsedName(clk,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(gnt_busy,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.read_ig_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_cvtoutDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_cvtoutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_cvtoutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_cvtoutDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(NV_NVDLA_CDP_DP_cvtoutDriver,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_cvtoutDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_cvtoutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_eg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_eg,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(cq_rd_pd,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(mcif2pdp_wr_rsp_complete,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(cq_rd_prdy,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_eg,[Default]), UsedName(mcif2cdp_wr_rsp_complete,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_eg;init;,[Default]), UsedName(noc2mcif_axi_b_bid,[Default]), UsedName(name,[Default]), UsedName(eq2ig_axi_vld,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(noc2mcif_axi_b_bvalid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(mcif2rbk_wr_rsp_complete,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq2ig_axi_len,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(mcif2bdma_wr_rsp_complete,[Default]), UsedName(cq_rd_pvld,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(noc2mcif_axi_b_bready,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_eg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(cq_rd_pd,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(mcif2pdp_wr_rsp_complete,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(cq_rd_prdy,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_eg,[Default]), UsedName(mcif2cdp_wr_rsp_complete,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_eg;init;,[Default]), UsedName(noc2mcif_axi_b_bid,[Default]), UsedName(name,[Default]), UsedName(eq2ig_axi_vld,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(noc2mcif_axi_b_bvalid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(mcif2rbk_wr_rsp_complete,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq2ig_axi_len,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(mcif2bdma_wr_rsp_complete,[Default]), UsedName(cq_rd_pvld,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(noc2mcif_axi_b_bready,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_arbDriver,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.read_ig_arb_Driver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.read_ig_arb_Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.read_ig_arb_Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.read_ig_arb_Driver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(read_ig_arb_Driver,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.read_ig_arb_Driver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(read_ig_arb_Driver,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.read_ig_arb_Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_write...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_write)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_write)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_write,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_wr_weight_bdma,[Default]), UsedName(sdp2mcif_wr_req_ready,[Default]), UsedName(pdp2mcif_wr_req_valid,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_write;init;,[Default]), UsedName(cdp2mcif_wr_req_pd,[Default]), UsedName(cdp2mcif_wr_req_ready,[Default]), UsedName(reg2dp_wr_os_cnt,[Default]), UsedName(!=,[Default]), UsedName(rbk2mcif_wr_req_pd,[Default]), UsedName(notify,[Default]), UsedName(bdma2mcif_wr_req_ready,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_wr_weight_cdp,[Default]), UsedName(eq,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(bdma2mcif_wr_req_pd,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(mcif2pdp_wr_rsp_complete,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(mcif2cdp_wr_rsp_complete,[Default]), UsedName(noc2mcif_axi_b_bid,[Default]), UsedName(reg2dp_wr_weight_pdp,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(bdma2mcif_wr_req_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(noc2mcif_axi_b_bvalid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(mcif2rbk_wr_rsp_complete,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_wr_weight_sdp,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(rbk2mcif_wr_req_valid,[Default]), UsedName(NV_NVDLA_MCIF_write,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(pdp2mcif_wr_req_ready,[Default]), UsedName(##,[Default]), UsedName(reg2dp_wr_weight_rbk,[Default]), UsedName(mcif2bdma_wr_rsp_complete,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(sdp2mcif_wr_req_valid,[Default]), UsedName(cdp2mcif_wr_req_valid,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(rbk2mcif_wr_req_ready,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(sdp2mcif_wr_req_pd,[Default]), UsedName(reset,[Default]), UsedName(pdp2mcif_wr_req_pd,[Default]), UsedName(noc2mcif_axi_b_bready,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_write has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_wr_weight_bdma,[Default]), UsedName(sdp2mcif_wr_req_ready,[Default]), UsedName(pdp2mcif_wr_req_valid,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_write;init;,[Default]), UsedName(cdp2mcif_wr_req_pd,[Default]), UsedName(cdp2mcif_wr_req_ready,[Default]), UsedName(reg2dp_wr_os_cnt,[Default]), UsedName(!=,[Default]), UsedName(rbk2mcif_wr_req_pd,[Default]), UsedName(notify,[Default]), UsedName(bdma2mcif_wr_req_ready,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_wr_weight_cdp,[Default]), UsedName(eq,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(bdma2mcif_wr_req_pd,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(mcif2pdp_wr_rsp_complete,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(mcif2cdp_wr_rsp_complete,[Default]), UsedName(noc2mcif_axi_b_bid,[Default]), UsedName(reg2dp_wr_weight_pdp,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(bdma2mcif_wr_req_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(noc2mcif_axi_b_bvalid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(mcif2rbk_wr_rsp_complete,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_wr_weight_sdp,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(rbk2mcif_wr_req_valid,[Default]), UsedName(NV_NVDLA_MCIF_write,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(pdp2mcif_wr_req_ready,[Default]), UsedName(##,[Default]), UsedName(reg2dp_wr_weight_rbk,[Default]), UsedName(mcif2bdma_wr_rsp_complete,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(sdp2mcif_wr_req_valid,[Default]), UsedName(cdp2mcif_wr_req_valid,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(rbk2mcif_wr_req_ready,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(sdp2mcif_wr_req_pd,[Default]), UsedName(reset,[Default]), UsedName(pdp2mcif_wr_req_pd,[Default]), UsedName(noc2mcif_axi_b_bready,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_write)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_cvtout...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_cvtout)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_cvtout)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_cvtout,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cvtout_prdy,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(mul2ocvt_pd,[Default]), UsedName(eq,[Default]), UsedName(sync2ocvt_pd,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(mul2ocvt_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_datout_scale,[Default]), UsedName(reg2dp_datout_offset,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(cvtout_pvld,[Default]), UsedName(reg2dp_datout_shifter,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_CDP_DP_cvtout,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(sync2ocvt_prdy,[Default]), UsedName(mul2ocvt_pvld,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_cvtout;init;,[Default]), UsedName(sync2ocvt_pvld,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(cvtout_pd,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_cvtout has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_cvtout)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_ig...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_ig,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(mcif2noc_axi_aw_awlen,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(mcif2noc_axi_w_wready,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2noc_axi_w_wvalid,[Default]), UsedName(mcif2noc_axi_aw_awid,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg3dp_wr_os_cnt,[Default]), UsedName(mcif2noc_axi_w_wdata,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_ig;init;,[Default]), UsedName(mcif2noc_axi_aw_awvalid,[Default]), UsedName(mcif2noc_axi_aw_awaddr,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(eg2ig_axi_len,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_ig,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(mcif2noc_axi_w_wstrb,[Default]), UsedName(_component,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2noc_axi_aw_awready,[Default]), UsedName(mcif2noc_axi_w_wlast,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_ig has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(mcif2noc_axi_aw_awlen,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(mcif2noc_axi_w_wready,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2noc_axi_w_wvalid,[Default]), UsedName(mcif2noc_axi_aw_awid,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg3dp_wr_os_cnt,[Default]), UsedName(mcif2noc_axi_w_wdata,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_ig;init;,[Default]), UsedName(mcif2noc_axi_aw_awvalid,[Default]), UsedName(mcif2noc_axi_aw_awaddr,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(eg2ig_axi_len,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_ig,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(mcif2noc_axi_w_wstrb,[Default]), UsedName(_component,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2noc_axi_aw_awready,[Default]), UsedName(mcif2noc_axi_w_wlast,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_cvtDriver,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.test_shift...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.test_shift)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.test_shift)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.test_shift,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla;test_shift;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName(c,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(test_shift,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(a,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.test_shift has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla;test_shift;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName(c,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(test_shift,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(a,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.test_shift)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.HLS_cdp_ocvt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.HLS_cdp_ocvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.HLS_cdp_ocvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDP_DP_cvtout: Set(UsedName(chn_data_out_rsc_z,[Default]), UsedName(cfg_truncate_rsc_z,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(HLS_cdp_ocvt,[Default]), UsedName(nvdla;HLS_cdp_ocvt;init;,[Default]), UsedName(IO,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(cfg_alu_in_rsc_z,[Default]), UsedName(io,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.HLS_cdp_ocvt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(chn_data_out_rsc_z,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(cfg_truncate_rsc_z,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(HLS_cdp_ocvt,[Default]), UsedName(nvdla;HLS_cdp_ocvt;init;,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(override_clock,[Default]), UsedName(cfg_alu_in_rsc_z,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 2 classes due to The nvdla.HLS_cdp_ocvt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(chn_data_out_rsc_z,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(cfg_truncate_rsc_z,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(HLS_cdp_ocvt,[Default]), UsedName(nvdla;HLS_cdp_ocvt;init;,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(override_clock,[Default]), UsedName(cfg_alu_in_rsc_z,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.HLS_cdp_ocvt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_CDP_DP_cvtout)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_cvtin...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_cvtin)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_cvtin)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_cvtin,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_datin_scale,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(cdp_rdma2dp_valid,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_cvtin;init;,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(NV_NVDLA_CDP_DP_cvtin,[Default]), UsedName(!=,[Default]), UsedName(reg2dp_datin_shifter,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(cvt2buf_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(cdp_rdma2dp_ready,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(cvt2buf_prdy,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(reg2dp_datin_offset,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(cvt2buf_pvld,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(cvt2sync_prdy,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName(cvt2sync_pd,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(cdp_rdma2dp_pd,[Default]), UsedName(portsSize,[Default]), UsedName(cvt2sync_pvld,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_cvtin has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_cvtin)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.test_shift2Driver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.test_shift2Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.test_shift2Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.test_shift2Driver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(test_shift2Driver,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.test_shift2Driver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(test_shift2Driver,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.test_shift2Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_IG_spt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_spt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_spt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_IG_spt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(spt2cvt_cmd_ready,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(arb2spt_dat_pd,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_spt,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(name,[Default]), UsedName(arb2spt_cmd_valid,[Default]), UsedName(spt2cvt_cmd_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(arb2spt_dat_valid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(arb2spt_cmd_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(spt2cvt_cmd_pd,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_spt;init;,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(arb2spt_cmd_ready,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(spt2cvt_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(arb2spt_dat_ready,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(spt2cvt_dat_valid,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(spt2cvt_dat_ready,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_IG_spt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(spt2cvt_cmd_ready,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(arb2spt_dat_pd,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_spt,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(name,[Default]), UsedName(arb2spt_cmd_valid,[Default]), UsedName(spt2cvt_cmd_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(arb2spt_dat_valid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(arb2spt_cmd_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(spt2cvt_cmd_pd,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_spt;init;,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(arb2spt_cmd_ready,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(spt2cvt_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(arb2spt_dat_ready,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(spt2cvt_dat_valid,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(spt2cvt_dat_ready,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_spt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_IG_cvt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_IG_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_IG_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_ig: Set(UsedName(mcif2noc_axi_ar_arlen,[Default]), UsedName(spt2cvt_req_pd,[Default]), UsedName(mcif2noc_axi_ar_araddr,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_cvt;init;,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(spt2cvt_req_valid,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_cvt,[Default]), UsedName(mcif2noc_axi_ar_arready,[Default]), UsedName(mcif2noc_axi_ar_arvalid,[Default]), UsedName(IO,[Default]), UsedName(io,[Default]), UsedName(spt2cvt_req_ready,[Default]), UsedName(mcif2noc_axi_ar_arid,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_IG_cvt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(mcif2noc_axi_ar_arlen,[Default]), UsedName(spt2cvt_req_pd,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(mcif2noc_axi_ar_araddr,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_cvt;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(spt2cvt_req_valid,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_cvt,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(mcif2noc_axi_ar_arready,[Default]), UsedName(mcif2noc_axi_ar_arvalid,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(spt2cvt_req_ready,[Default]), UsedName(mcif2noc_axi_ar_arid,[Default]), UsedName(clock,[Default]))) invalidates 2 classes due to The nvdla.NV_NVDLA_MCIF_READ_IG_cvt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(mcif2noc_axi_ar_arlen,[Default]), UsedName(spt2cvt_req_pd,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(mcif2noc_axi_ar_araddr,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_cvt;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(forceName,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(spt2cvt_req_valid,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_cvt,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(mcif2noc_axi_ar_arready,[Default]), UsedName(mcif2noc_axi_ar_arvalid,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(spt2cvt_req_ready,[Default]), UsedName(mcif2noc_axi_ar_arid,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_IG_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_MCIF_READ_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_cvtinDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_cvtinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_cvtinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_cvtinDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(NV_NVDLA_CDP_DP_cvtinDriver,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_cvtinDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_cvtinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.xxifConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.xxifConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.nvdlaConfig by nvdla.xxifConfiguration[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.nvdlaConfig, nvdla.xxifConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CACC_delivery_buffer: Set(UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_CORE_activeDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_arb: Set(UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(RDMA_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cmac2cacc_if: Set(UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_sg: Set(UsedName(==,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_wlIO. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_imgDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_CVT_cellDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_DMAIF_wr: Set(UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_dma_muxDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.csc_wl_dec_if: Set(UsedName(CSC_ATOMK,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(CSC_BPE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_sgDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_wl: Set(UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(CSC_BPE,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(CSC_ATOMK_HF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl: Set(UsedName(CMAC_BPE,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CMAC_ATOMC,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.sc2buf_data_rd_if: Set(UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_cbufDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_dlDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_csc. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dma_mux: Set(UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cbuf.cbufImpl: Set(UsedName(==,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_DMAIF_rdrsp: Set(UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_ig: Set(UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_IMG_sgDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_CORE_macDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cacc: Set(UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dc: Set(UsedName(==,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ATMMBW,[Default]), UsedName(KK,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(ATMC,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_GLB_fc. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_rd_rsp_if: Set(UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_cvt: Set(UsedName(BNUM,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(ATMC,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_cbuf. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_glbDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cdma2sc_if: Set(UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.updt_entries_kernels_if: Set(UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_pack: Set(UsedName(==,[Default]), UsedName(BNUM,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(MN_BW,[Default]), UsedName(ATMMBW,[Default]), UsedName(ATMC,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(SS,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_CVT_cell. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cdmaIO: Set(UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_READ_igDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_WL_decDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cacc2sdp_if: Set(UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_core: Set(UsedName(MAC_PD_LATENCY,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_reg: Set(UsedName(CMAC_SLCG_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl: Set(UsedName(CMAC_BPE,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CMAC_ATOMC,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_mac: Set(UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(CMAC_ATOMC,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_status: Set(UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_active: Set(UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CMAC_ATOMC,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_DMAIF_rdreq: Set(UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CACC_assembly_ctrl: Set(UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_sg: Set(UsedName(ATMM_NUM,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(ATMMBW,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cdma2buf_wr_if: Set(UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.csc2cmac_wt_if: Set(UsedName(NVDLA_BPE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl: Set(UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CACC_assembly_buffer: Set(UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_CORE_rt_in. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.nvdla_dma_wr_rsp_if. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_cdma: Set(UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(ATMMBW,[Default]), UsedName(ATMC,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.sc2buf_wt_rd_if: Set(UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_cmacDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_IG_arb: Set(UsedName(WDMA_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_cmac. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_write. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_shared_bufferDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_img: Set(UsedName(BNUM,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMC,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_glb: Set(UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_CORE_rt_out. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_statusDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_WL_dec: Set(UsedName(CSC_ATOMK,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(CSC_BPE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_caccDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_dcDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_eg: Set(UsedName(WDMA_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_ig: Set(UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_shared_buffer: Set(UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_cvtDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CMAC_coreDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_bpt: Set(UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_wtIO: Set(UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMMBW,[Default]), UsedName(ATMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_READ_IG_cvtDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_rd_req_if: Set(UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_wlDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl: Set(UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CMAC_ATOMC,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_wtDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CDMA_IMG_packDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_cq: Set(UsedName(FV_RAND_WR_PAUSE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_cvt: Set(UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_IMG_ctrl: Set(UsedName(==,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ATMMBW,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_dcIO: Set(UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMMBW,[Default]), UsedName(ATMC,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(DMAIF,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.cmac_core_actv: Set(UsedName(CMAC_BPE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_regfile. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.csc2cmac_data_if: Set(UsedName(NVDLA_BPE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDMA_wt: Set(UsedName(==,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(ATMM8,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMKBW,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ATMMBW,[Default]), UsedName(KK,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_dlIO. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.sdp2pdp_if: Set(UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_BPE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_cscDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CSC_dl: Set(UsedName(==,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(CSC_BPE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_READ_IG_arbDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_cdmaDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_CSC_regfileDriver. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdla_dma_wr_req_if: Set(UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of nvdla.NV_NVDLA_MCIF_WRITE_IG_spt. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.updt_entries_slices_if: Set(UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_arb: Set(UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(RDMA_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.nvdlaConfig: Set(UsedName(nvdla;xxifConfiguration;init;,[Default]), UsedName(xxifConfiguration,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_ig: Set(UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_IG_arb: Set(UsedName(WDMA_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_eg: Set(UsedName(WDMA_NUM,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_ig: Set(UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_IG_bpt: Set(UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_WRITE_cq: Set(UsedName(FV_RAND_WR_PAUSE,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.xxifConfiguration,ModifiedNames(changes = UsedName(tieoff_axid_rbk,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(==,[Default]), UsedName(BNUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(toString,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(notifyAll,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(tieoff_axid_cdma_dat,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(ATMM8,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(!=,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(notify,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(eq,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(ATMKBW,[Default]), UsedName(WDMA_MAX_NUM,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(WDMA_NUM,[Default]), UsedName(FPGA,[Default]), UsedName(ATMC_NUM,[Default]), UsedName(nvdla;xxifConfiguration;init;,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(NVDLA_PDP_MEM_RD_REQ,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(LARGE_FIFO_RAM,[Default]), UsedName(tieoff_axid_cdp,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(RDMA_MAX_NUM,[Default]), UsedName(useFPGA,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(MN_BW,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(wait,[Default]), UsedName(PDP_NUM,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(SDP_THROUGHPUT,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(tieoff_axid_pdp,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(PDPBW,[Default]), UsedName(NVDLA_PDP_MEM_MASK_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(AM_AW2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(synchronized,[Default]), UsedName(tieoff_axid_bdma,[Default]), UsedName(ATMMBW,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName($asInstanceOf,[Default]), UsedName(KK,[Default]), UsedName(NVDLA_PDP_ONFLY_INPUT_BW,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_DMA_WR_IG_PW,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_PDP_BWPE,[Default]), UsedName(NVDLA_CDP_BWPE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(ne,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(ATMM,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_WR_REQ,[Default]), UsedName(tieoff_axid_sdp_b,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(tieoff_axid_sdp_n,[Default]), UsedName(xxifConfiguration,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_CDP_DMAIF_BW,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(clone,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(TW,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(NVDLA_PDP_DMAIF_BW,[Default]), UsedName(NVDLA_HLS_ADD17_LATENCY,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(getClass,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(tieoff_axid_sdp,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(##,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(FV_RAND_WR_PAUSE,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(hashCode,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(NVDLA_CDP_MEM_ADDR_BW,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(tieoff_axid_cdma_wt,[Default]), UsedName(NVDLA_CDP_ICVTO_BWPE,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(AM_AW,[Default]), UsedName(NVDLA_PDP_MEM_RD_RSP,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(AM_DW,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(tieoff_axid_sdp_e,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_PDP_MEM_MASK_BIT,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(tieoff_axid_read,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(SMALL_FIFO_RAM,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(EW_INP_OUT_DW,[Default]))) invalidates 61 classes due to The nvdla.xxifConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(tieoff_axid_rbk,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(==,[Default]), UsedName(BNUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(toString,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(notifyAll,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(tieoff_axid_cdma_dat,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(ATMM8,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(!=,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(notify,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(eq,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(ATMKBW,[Default]), UsedName(WDMA_MAX_NUM,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(WDMA_NUM,[Default]), UsedName(FPGA,[Default]), UsedName(ATMC_NUM,[Default]), UsedName(nvdla;xxifConfiguration;init;,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_RD_IG_PW,[Default]), UsedName(NVDLA_PDP_MEM_RD_REQ,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(LARGE_FIFO_RAM,[Default]), UsedName(tieoff_axid_cdp,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(RDMA_MAX_NUM,[Default]), UsedName(useFPGA,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(MN_BW,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(wait,[Default]), UsedName(PDP_NUM,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(SDP_THROUGHPUT,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(tieoff_axid_pdp,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(PDPBW,[Default]), UsedName(NVDLA_PDP_MEM_MASK_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(RDMA_NUM,[Default]), UsedName(AM_AW2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(synchronized,[Default]), UsedName(tieoff_axid_bdma,[Default]), UsedName(ATMMBW,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName($asInstanceOf,[Default]), UsedName(KK,[Default]), UsedName(NVDLA_PDP_ONFLY_INPUT_BW,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_DMA_WR_IG_PW,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_PDP_BWPE,[Default]), UsedName(NVDLA_CDP_BWPE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(ne,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(ATMM,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_WR_REQ,[Default]), UsedName(tieoff_axid_sdp_b,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(tieoff_axid_sdp_n,[Default]), UsedName(xxifConfiguration,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_CDP_DMAIF_BW,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(clone,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(TW,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(NVDLA_PDP_DMAIF_BW,[Default]), UsedName(NVDLA_HLS_ADD17_LATENCY,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_STRB,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(getClass,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(tieoff_axid_sdp,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(##,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(FV_RAND_WR_PAUSE,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(hashCode,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(NVDLA_CDP_MEM_ADDR_BW,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(tieoff_axid_cdma_wt,[Default]), UsedName(NVDLA_CDP_ICVTO_BWPE,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(AM_AW,[Default]), UsedName(NVDLA_PDP_MEM_RD_RSP,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(AM_DW,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(tieoff_axid_sdp_e,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_PDP_MEM_MASK_BIT,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(tieoff_axid_read,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(SMALL_FIFO_RAM,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(EW_INP_OUT_DW,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.nvdlaConfig, nvdla.xxifConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_CACC_delivery_buffer, nvdla.NV_NVDLA_MCIF_READ_IG_arb, nvdla.cmac2cacc_if, nvdla.NV_NVDLA_CSC_sg, nvdla.nvdlaConfig, nvdla.NV_NVDLA_DMAIF_wr, nvdla.csc_wl_dec_if, nvdla.NV_NVDLA_CSC_wl, nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl, nvdla.sc2buf_data_rd_if, nvdla.NV_NVDLA_CDMA_dma_mux, nvdla.NV_NVDLA_cbuf.cbufImpl, nvdla.NV_NVDLA_DMAIF_rdrsp, nvdla.NV_NVDLA_MCIF_READ_ig, nvdla.NV_NVDLA_cacc, nvdla.NV_NVDLA_CDMA_dc, nvdla.nvdla_dma_rd_rsp_if, nvdla.NV_NVDLA_CDMA_cvt, nvdla.cdma2sc_if, nvdla.updt_entries_kernels_if, nvdla.NV_NVDLA_CDMA_IMG_pack, nvdla.NV_NVDLA_cdmaIO, nvdla.cacc2sdp_if, nvdla.NV_NVDLA_CMAC_core, nvdla.NV_NVDLA_CMAC_reg, nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl, nvdla.NV_NVDLA_CMAC_CORE_mac, nvdla.NV_NVDLA_CDMA_status, nvdla.NV_NVDLA_CMAC_CORE_active, nvdla.NV_NVDLA_DMAIF_rdreq, nvdla.NV_NVDLA_CACC_assembly_ctrl, nvdla.NV_NVDLA_CDMA_IMG_sg, nvdla.cdma2buf_wr_if, nvdla.csc2cmac_wt_if, nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl, nvdla.NV_NVDLA_CACC_assembly_buffer, nvdla.NV_NVDLA_cdma, nvdla.sc2buf_wt_rd_if, nvdla.NV_NVDLA_MCIF_WRITE_IG_arb, nvdla.NV_NVDLA_CDMA_img, nvdla.NV_NVDLA_glb, nvdla.NV_NVDLA_CSC_WL_dec, nvdla.NV_NVDLA_MCIF_WRITE_eg, nvdla.NV_NVDLA_MCIF_WRITE_ig, nvdla.NV_NVDLA_CDMA_shared_buffer, nvdla.NV_NVDLA_MCIF_READ_IG_bpt, nvdla.NV_NVDLA_CDMA_wtIO, nvdla.nvdla_dma_rd_req_if, nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl, nvdla.NV_NVDLA_MCIF_WRITE_cq, nvdla.NV_NVDLA_MCIF_READ_IG_cvt, nvdla.NV_NVDLA_CDMA_IMG_ctrl, nvdla.NV_NVDLA_CDMA_dcIO, nvdla.cmac_core_actv, nvdla.csc2cmac_data_if, nvdla.NV_NVDLA_CDMA_wt, nvdla.sdp2pdp_if, nvdla.NV_NVDLA_CSC_dl, nvdla.nvdla_dma_wr_req_if, nvdla.updt_entries_slices_if)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.HLS_cdp_icvt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.HLS_cdp_icvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.HLS_cdp_icvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_CDP_DP_cvtin: Set(UsedName(chn_data_out_rsc_z,[Default]), UsedName(cfg_truncate_rsc_z,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(IO,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(HLS_cdp_icvt,[Default]), UsedName(nvdla;HLS_cdp_icvt;init;,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(cfg_alu_in_rsc_z,[Default]), UsedName(io,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.HLS_cdp_icvt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(chn_data_out_rsc_z,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(cfg_truncate_rsc_z,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(_namespace,[Default]), UsedName(HLS_cdp_icvt,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(nvdla;HLS_cdp_icvt;init;,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(override_clock,[Default]), UsedName(cfg_alu_in_rsc_z,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 2 classes due to The nvdla.HLS_cdp_icvt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(chn_data_out_rsc_z,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(cfg_truncate_rsc_z,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(_namespace,[Default]), UsedName(HLS_cdp_icvt,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(nvdla;HLS_cdp_icvt;init;,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(override_clock,[Default]), UsedName(cfg_alu_in_rsc_z,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.HLS_cdp_icvt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_CDP_DP_cvtin)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(mcif2noc_axi_aw_awlen,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(spt2cvt_cmd_ready,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(mcif2noc_axi_w_wready,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2noc_axi_w_wvalid,[Default]), UsedName(reg2dp_wr_os_cnt,[Default]), UsedName(mcif2noc_axi_aw_awid,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(mcif2noc_axi_w_wdata,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(mcif2noc_axi_aw_awvalid,[Default]), UsedName(mcif2noc_axi_aw_awaddr,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_cvt,[Default]), UsedName(spt2cvt_cmd_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_cvt;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(eg2ig_axi_len,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(spt2cvt_cmd_pd,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(spt2cvt_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(mcif2noc_axi_w_wstrb,[Default]), UsedName(_component,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2noc_axi_aw_awready,[Default]), UsedName(spt2cvt_dat_valid,[Default]), UsedName(mcif2noc_axi_w_wlast,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(spt2cvt_dat_ready,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(mcif2noc_axi_aw_awlen,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(spt2cvt_cmd_ready,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(mcif2noc_axi_w_wready,[Default]), UsedName(getPorts,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2noc_axi_w_wvalid,[Default]), UsedName(reg2dp_wr_os_cnt,[Default]), UsedName(mcif2noc_axi_aw_awid,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName(mcif2noc_axi_w_wdata,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(mcif2noc_axi_aw_awvalid,[Default]), UsedName(mcif2noc_axi_aw_awaddr,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_cvt,[Default]), UsedName(spt2cvt_cmd_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_cvt;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(eg2ig_axi_len,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(spt2cvt_cmd_pd,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(spt2cvt_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(mcif2noc_axi_w_wstrb,[Default]), UsedName(_component,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2noc_axi_aw_awready,[Default]), UsedName(spt2cvt_dat_valid,[Default]), UsedName(mcif2noc_axi_w_wlast,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(spt2cvt_dat_ready,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_bptDriver,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(conf,[Implicit]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_IG_bptDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_IG_arb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_IG_arb,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_wr_weight_bdma,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_cmd_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(bpt2arb_dat_ready,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_arb,[Default]), UsedName(!=,[Default]), UsedName(arb2spt_dat_pd,[Default]), UsedName(notify,[Default]), UsedName(bpt2arb_dat_valid,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_wr_weight_cdp,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(reg2dp_wr_weight_pdp,[Default]), UsedName(name,[Default]), UsedName(arb2spt_cmd_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(bpt2arb_cmd_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(arb2spt_dat_valid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_wr_weight_sdp,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(arb2spt_cmd_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(arb2spt_cmd_ready,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(bpt2arb_dat_pd,[Default]), UsedName(##,[Default]), UsedName(arb2spt_dat_ready,[Default]), UsedName(reg2dp_wr_weight_rbk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_arb;init;,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(bpt2arb_cmd_valid,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_IG_arb has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_wr_weight_bdma,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_cmd_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(bpt2arb_dat_ready,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_arb,[Default]), UsedName(!=,[Default]), UsedName(arb2spt_dat_pd,[Default]), UsedName(notify,[Default]), UsedName(bpt2arb_dat_valid,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_wr_weight_cdp,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(reg2dp_wr_weight_pdp,[Default]), UsedName(name,[Default]), UsedName(arb2spt_cmd_valid,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(bpt2arb_cmd_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(arb2spt_dat_valid,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_wr_weight_sdp,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(arb2spt_cmd_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(arb2spt_cmd_ready,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(bpt2arb_dat_pd,[Default]), UsedName(##,[Default]), UsedName(arb2spt_dat_ready,[Default]), UsedName(reg2dp_wr_weight_rbk,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_arb;init;,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(bpt2arb_cmd_valid,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_IG_arb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of nvdla.NV_NVDLA_MCIF_READ_ig: Set(UsedName(NV_NVDLA_MCIF_READ_IG_arb,[Default]), UsedName(arb2spt_req_pd,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(arb2spt_req_ready,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(reg2dp_rw_weight,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(IO,[Default]), UsedName(arb2spt_req_valid,[Default]), UsedName(io,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_arb;init;,[Default]), UsedName(bpt2arb_req_valid,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_IG_arb,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_arb,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(arb2spt_req_pd,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(arb2spt_req_ready,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_rw_weight,[Default]), UsedName(addId,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(arb2spt_req_valid,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_arb;init;,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(bpt2arb_req_valid,[Default]), UsedName(clock,[Default]))) invalidates 2 classes due to The nvdla.NV_NVDLA_MCIF_READ_IG_arb has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(NV_NVDLA_MCIF_READ_IG_arb,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(arb2spt_req_pd,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(arb2spt_req_ready,[Default]), UsedName(name,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_rw_weight,[Default]), UsedName(addId,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(arb2spt_req_valid,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_IG_arb;init;,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(bpt2arb_req_valid,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_IG_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(nvdla.NV_NVDLA_MCIF_READ_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_READ_ig...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_READ_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_READ_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_READ_ig,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(rdma2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(arb2spt_req_pd,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(mcif2noc_axi_ar_arlen,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(u_arb,[Default]), UsedName(mcif2noc_axi_ar_araddr,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(u_cvt,[Default]), UsedName(initializeInParent,[Default]), UsedName(j,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(forceName,[Default]), UsedName(arb2spt_req_ready,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(NV_NVDLA_MCIF_READ_ig,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rdma2mcif_rd_req_pd,[Default]), UsedName(reg2dp_rw_weight,[Default]), UsedName(rdma2mcif_rd_req_ready,[Default]), UsedName(addId,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(mcif2noc_axi_ar_arready,[Default]), UsedName(mcif2noc_axi_ar_arvalid,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_ig;init;,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(rdma2mcif_rd_req_valid,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(arb2spt_req_valid,[Default]), UsedName(u_bpt,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(bpt2arb_req_valid,[Default]), UsedName(mcif2noc_axi_ar_arid,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_READ_ig has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(rdma2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(arb2spt_req_pd,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_req_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(!=,[Default]), UsedName(mcif2noc_axi_ar_arlen,[Default]), UsedName(notify,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(u_arb,[Default]), UsedName(mcif2noc_axi_ar_araddr,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(u_cvt,[Default]), UsedName(initializeInParent,[Default]), UsedName(j,[Default]), UsedName($init$,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rd_os_cnt,[Default]), UsedName(forceName,[Default]), UsedName(arb2spt_req_ready,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(NV_NVDLA_MCIF_READ_ig,[Default]), UsedName(cq_wr_thread_id,[Default]), UsedName(name,[Default]), UsedName(cq_wr_prdy,[Default]), UsedName(wait,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(eg2ig_axi_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rdma2mcif_rd_req_pd,[Default]), UsedName(reg2dp_rw_weight,[Default]), UsedName(rdma2mcif_rd_req_ready,[Default]), UsedName(addId,[Default]), UsedName(bpt2arb_req_pd,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(cq_wr_pvld,[Default]), UsedName(mcif2noc_axi_ar_arready,[Default]), UsedName(mcif2noc_axi_ar_arvalid,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_READ_ig;init;,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(cq_wr_pd,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(rdma2mcif_rd_req_valid,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(arb2spt_req_valid,[Default]), UsedName(u_bpt,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(bpt2arb_req_valid,[Default]), UsedName(mcif2noc_axi_ar_arid,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_READ_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt,ModifiedNames(changes = UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_cmd_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(bpt2arb_dat_ready,[Default]), UsedName(dma2bpt_req_ready,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(bpt2arb_dat_valid,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(axid,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(name,[Default]), UsedName(dma2bpt_req_valid,[Default]), UsedName(wait,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_bpt,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(bpt2arb_cmd_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(dma2bpt_req_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(bpt2arb_dat_pd,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_bpt;init;,[Default]), UsedName(bpt2arb_cmd_valid,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(addPostnameHook,[Default]), UsedName(addCommand,[Default]), UsedName(generateComponent,[Default]), UsedName(portsContains,[Default]), UsedName(toNamed,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(getPorts,[Default]), UsedName(bpt2arb_cmd_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(bpt2arb_dat_ready,[Default]), UsedName(dma2bpt_req_ready,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(bpt2arb_dat_valid,[Default]), UsedName(override_reset,[Default]), UsedName(_id,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(eq,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(axid,[Default]), UsedName(annotate,[Default]), UsedName(forceName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(name,[Default]), UsedName(dma2bpt_req_valid,[Default]), UsedName(wait,[Default]), UsedName(NV_NVDLA_MCIF_WRITE_IG_bpt,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(bpt2arb_cmd_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(setRef,[Default]), UsedName(desiredName,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addId,[Default]), UsedName(parentModName,[Default]), UsedName(ne,[Default]), UsedName(dma2bpt_req_pd,[Default]), UsedName(_parent,[Default]), UsedName(instanceName,[Default]), UsedName(pathName,[Default]), UsedName(IO,[Default]), UsedName(getRef,[Default]), UsedName(getModulePorts,[Default]), UsedName(clone,[Default]), UsedName(getPublicFields,[Default]), UsedName(equals,[Default]), UsedName(getCommands,[Default]), UsedName(suggestName,[Default]), UsedName(_namespace,[Default]), UsedName(getClass,[Default]), UsedName(parentPathName,[Default]), UsedName(bpt2arb_dat_pd,[Default]), UsedName(##,[Default]), UsedName(_component,[Default]), UsedName(finalize,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_WRITE_IG_bpt;init;,[Default]), UsedName(bpt2arb_cmd_valid,[Default]), UsedName(hashCode,[Default]), UsedName(getIds,[Default]), UsedName(_closed,[Default]), UsedName(override_clock,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(circuitName,[Default]), UsedName(io,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nameIds,[Default]), UsedName(reset,[Default]), UsedName(portsSize,[Default]), UsedName(clock,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_WRITE_IG_bpt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.HLS_cdp_ocvtDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.HLS_cdp_ocvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.HLS_cdp_ocvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.HLS_cdp_ocvtDriver,ModifiedNames(changes = UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(HLS_cdp_ocvtDriver,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]))) invalidates 1 classes due to The nvdla.HLS_cdp_ocvtDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(notifyAll,[Default]), UsedName(executionStart,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(wait,[Default]), UsedName(HLS_cdp_ocvtDriver,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(main,[Default]), UsedName(clone,[Default]), UsedName(equals,[Default]), UsedName(getClass,[Default]), UsedName(##,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(args,[Default]), UsedName($isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.HLS_cdp_ocvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set(nvdla.NV_NVDLA_CACC_delivery_buffer, nvdla.NV_NVDLA_CMAC_CORE_activeDriver, nvdla.cmac2cacc_if, nvdla.NV_NVDLA_CSC_sg, nvdla.NV_NVDLA_CSC_wlIO, nvdla.NV_NVDLA_CDMA_imgDriver, nvdla.NV_NVDLA_CDMA_CVT_cellDriver, nvdla.NV_NVDLA_DMAIF_wr, nvdla.NV_NVDLA_CDMA_dma_muxDriver, nvdla.csc_wl_dec_if, nvdla.NV_NVDLA_CSC_sgDriver, nvdla.NV_NVDLA_CSC_wl, nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl, nvdla.sc2buf_data_rd_if, nvdla.NV_NVDLA_cbufDriver, nvdla.NV_NVDLA_CSC_dlDriver, nvdla.NV_NVDLA_csc, nvdla.NV_NVDLA_CDMA_dma_mux, nvdla.NV_NVDLA_cbuf.cbufImpl, nvdla.NV_NVDLA_DMAIF_rdrsp, nvdla.NV_NVDLA_CDMA_IMG_sgDriver, nvdla.NV_NVDLA_CMAC_CORE_macDriver, nvdla.NV_NVDLA_cacc, nvdla.NV_NVDLA_CDMA_dc, nvdla.NV_NVDLA_GLB_fc, nvdla.nvdla_dma_rd_rsp_if, nvdla.NV_NVDLA_CDMA_cvt, nvdla.NV_NVDLA_cbuf, nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver, nvdla.NV_NVDLA_glbDriver, nvdla.cdma2sc_if, nvdla.updt_entries_kernels_if, nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver, nvdla.NV_NVDLA_CDMA_IMG_pack, nvdla.NV_NVDLA_CDMA_CVT_cell, nvdla.NV_NVDLA_cdmaIO, nvdla.NV_NVDLA_CSC_WL_decDriver, nvdla.cacc2sdp_if, nvdla.NV_NVDLA_CMAC_core, nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver, nvdla.NV_NVDLA_CMAC_reg, nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl, nvdla.NV_NVDLA_CMAC_CORE_mac, nvdla.NV_NVDLA_CDMA_status, nvdla.NV_NVDLA_CMAC_CORE_active, nvdla.NV_NVDLA_DMAIF_rdreq, nvdla.NV_NVDLA_CACC_assembly_ctrl, nvdla.NV_NVDLA_CDMA_IMG_sg, nvdla.cdma2buf_wr_if, nvdla.csc2cmac_wt_if, nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl, nvdla.NV_NVDLA_CACC_assembly_buffer, nvdla.NV_NVDLA_CMAC_CORE_rt_in, nvdla.nvdla_dma_wr_rsp_if, nvdla.NV_NVDLA_cdma, nvdla.sc2buf_wt_rd_if, nvdla.NV_NVDLA_cmacDriver, nvdla.NV_NVDLA_cmac, nvdla.NV_NVDLA_CDMA_shared_bufferDriver, nvdla.NV_NVDLA_CDMA_img, nvdla.NV_NVDLA_glb, nvdla.NV_NVDLA_CMAC_CORE_rt_out, nvdla.NV_NVDLA_CDMA_statusDriver, nvdla.NV_NVDLA_CSC_WL_dec, nvdla.NV_NVDLA_caccDriver, nvdla.NV_NVDLA_CDMA_dcDriver, nvdla.NV_NVDLA_CDMA_shared_buffer, nvdla.NV_NVDLA_CDMA_cvtDriver, nvdla.NV_NVDLA_CMAC_coreDriver, nvdla.NV_NVDLA_CDMA_wtIO, nvdla.nvdla_dma_rd_req_if, nvdla.NV_NVDLA_CSC_wlDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl, nvdla.NV_NVDLA_CDMA_wtDriver, nvdla.NV_NVDLA_CDMA_IMG_packDriver, nvdla.NV_NVDLA_CDMA_IMG_ctrl, nvdla.NV_NVDLA_CDMA_dcIO, nvdla.cmac_core_actv, nvdla.NV_NVDLA_CSC_regfile, nvdla.csc2cmac_data_if, nvdla.NV_NVDLA_CDMA_wt, nvdla.NV_NVDLA_CSC_dlIO, nvdla.sdp2pdp_if, nvdla.NV_NVDLA_cscDriver, nvdla.NV_NVDLA_CSC_dl, nvdla.NV_NVDLA_cdmaDriver, nvdla.NV_NVDLA_CSC_regfileDriver, nvdla.nvdla_dma_wr_req_if, nvdla.updt_entries_slices_if)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_delivery_buffer, nvdla.NV_NVDLA_CMAC_CORE_activeDriver, nvdla.cmac2cacc_if, nvdla.NV_NVDLA_CSC_sg, nvdla.NV_NVDLA_CSC_wlIO, nvdla.NV_NVDLA_CDMA_imgDriver, nvdla.NV_NVDLA_CDMA_CVT_cellDriver, nvdla.NV_NVDLA_DMAIF_wr, nvdla.NV_NVDLA_CDMA_dma_muxDriver, nvdla.csc_wl_dec_if, nvdla.NV_NVDLA_CSC_sgDriver, nvdla.NV_NVDLA_CSC_wl, nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl, nvdla.sc2buf_data_rd_if, nvdla.NV_NVDLA_cbufDriver, nvdla.NV_NVDLA_CSC_dlDriver, nvdla.NV_NVDLA_csc, nvdla.NV_NVDLA_CDMA_dma_mux, nvdla.NV_NVDLA_cbuf.cbufImpl, nvdla.NV_NVDLA_DMAIF_rdrsp, nvdla.NV_NVDLA_CDMA_IMG_sgDriver, nvdla.NV_NVDLA_CMAC_CORE_macDriver, nvdla.NV_NVDLA_cacc, nvdla.NV_NVDLA_CDMA_dc, nvdla.NV_NVDLA_GLB_fc, nvdla.nvdla_dma_rd_rsp_if, nvdla.NV_NVDLA_CDMA_cvt, nvdla.NV_NVDLA_cbuf, nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver, nvdla.NV_NVDLA_glbDriver, nvdla.cdma2sc_if, nvdla.updt_entries_kernels_if, nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver, nvdla.NV_NVDLA_CDMA_IMG_pack, nvdla.NV_NVDLA_CDMA_CVT_cell, nvdla.NV_NVDLA_cdmaIO, nvdla.NV_NVDLA_CSC_WL_decDriver, nvdla.cacc2sdp_if, nvdla.NV_NVDLA_CMAC_core, nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver, nvdla.NV_NVDLA_CMAC_reg, nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl, nvdla.NV_NVDLA_CMAC_CORE_mac, nvdla.NV_NVDLA_CDMA_status, nvdla.NV_NVDLA_CMAC_CORE_active, nvdla.NV_NVDLA_DMAIF_rdreq, nvdla.NV_NVDLA_CACC_assembly_ctrl, nvdla.NV_NVDLA_CDMA_IMG_sg, nvdla.cdma2buf_wr_if, nvdla.csc2cmac_wt_if, nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl, nvdla.NV_NVDLA_CACC_assembly_buffer, nvdla.NV_NVDLA_CMAC_CORE_rt_in, nvdla.nvdla_dma_wr_rsp_if, nvdla.NV_NVDLA_cdma, nvdla.sc2buf_wt_rd_if, nvdla.NV_NVDLA_cmacDriver, nvdla.NV_NVDLA_cmac, nvdla.NV_NVDLA_CDMA_shared_bufferDriver, nvdla.NV_NVDLA_CDMA_img, nvdla.NV_NVDLA_glb, nvdla.NV_NVDLA_CMAC_CORE_rt_out, nvdla.NV_NVDLA_CDMA_statusDriver, nvdla.NV_NVDLA_CSC_WL_dec, nvdla.NV_NVDLA_caccDriver, nvdla.NV_NVDLA_CDMA_dcDriver, nvdla.NV_NVDLA_CDMA_shared_buffer, nvdla.NV_NVDLA_CDMA_cvtDriver, nvdla.NV_NVDLA_CMAC_coreDriver, nvdla.NV_NVDLA_CDMA_wtIO, nvdla.nvdla_dma_rd_req_if, nvdla.NV_NVDLA_CSC_wlDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl, nvdla.NV_NVDLA_CDMA_wtDriver, nvdla.NV_NVDLA_CDMA_IMG_packDriver, nvdla.NV_NVDLA_CDMA_IMG_ctrl, nvdla.NV_NVDLA_CDMA_dcIO, nvdla.cmac_core_actv, nvdla.NV_NVDLA_CSC_regfile, nvdla.csc2cmac_data_if, nvdla.NV_NVDLA_CDMA_wt, nvdla.NV_NVDLA_CSC_dlIO, nvdla.sdp2pdp_if, nvdla.NV_NVDLA_cscDriver, nvdla.NV_NVDLA_CSC_dl, nvdla.NV_NVDLA_cdmaDriver, nvdla.NV_NVDLA_CSC_regfileDriver, nvdla.nvdla_dma_wr_req_if, nvdla.updt_entries_slices_if)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_cacc by nvdla.NV_NVDLA_CACC_delivery_buffer[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CMAC_core by nvdla.cmac2cacc_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_cmac by nvdla.NV_NVDLA_CMAC_core[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl by nvdla.cmac2cacc_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CMAC_CORE_rt_out by nvdla.cmac2cacc_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_csc by nvdla.NV_NVDLA_CSC_sg[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CSC_WL_dec by nvdla.csc_wl_dec_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CSC_wl by nvdla.NV_NVDLA_CSC_WL_dec[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_cbuf.cbufImpl by nvdla.sc2buf_data_rd_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_cbuf by nvdla.sc2buf_data_rd_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CSC_dlIO by nvdla.sc2buf_data_rd_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CSC_dl by nvdla.sc2buf_data_rd_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_cdma by nvdla.NV_NVDLA_CDMA_dma_mux[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CDMA_IMG_sg by nvdla.NV_NVDLA_DMAIF_rdrsp[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CDMA_img by nvdla.NV_NVDLA_CDMA_IMG_sg[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CDMA_wt by nvdla.NV_NVDLA_DMAIF_rdrsp[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CDMA_dc by nvdla.NV_NVDLA_DMAIF_rdrsp[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_cdmaIO by nvdla.updt_entries_kernels_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CDMA_wtIO by nvdla.updt_entries_kernels_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CMAC_CORE_rt_in by nvdla.csc2cmac_wt_if[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl by nvdla.csc2cmac_wt_if[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
